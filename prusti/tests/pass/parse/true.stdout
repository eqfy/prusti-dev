// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zskip-verify -Zhide-uuids
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"

#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;

use prusti_contracts::*;

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_test1_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() { }

#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test2_$(NUM_UUID)(result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test2() { }

fn test3() {
    for _ in 0..2 {


        {
            #[allow(dead_code)]
            enum ProcMacroHack { Value = ("true", 0).1, }
            macro_rules! proc_macro_call {
                () =>
                {
                    if false
                    {
                        # [prusti :: spec_only] #
                        [prusti :: spec_id =
                         "$(NUM_UUID)"] #
                        [prusti :: assertion =
                         "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                        let _prusti_loop_invariant =
                        {
                            # [prusti :: spec_only] #
                            [prusti :: expr_id =
                             "$(NUM_UUID)_101"] || ->
                            bool { true } ;
                        } ;
                    }
                }
            }
            if false {
                #[prusti::spec_only]
                #[prusti::spec_id = "$(NUM_UUID)"]
                #[prusti::assertion =
                  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                let _prusti_loop_invariant =
                    {

                        #[prusti::spec_only]
                        #[prusti::expr_id =
                          "$(NUM_UUID)_101"]
                        || -> bool { true };
                    };
            }
        }
    }
}
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_test4_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test4_$(NUM_UUID)(result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() {
    for _ in 0..2 {
        {
            #[allow(dead_code)]
            enum ProcMacroHack { Value = ("true", 0).1, }
            macro_rules! proc_macro_call {
                () =>
                {
                    if false
                    {
                        # [prusti :: spec_only] #
                        [prusti :: spec_id =
                         "$(NUM_UUID)"] #
                        [prusti :: assertion =
                         "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                        let _prusti_loop_invariant =
                        {
                            # [prusti :: spec_only] #
                            [prusti :: expr_id =
                             "$(NUM_UUID)_101"] || ->
                            bool { true } ;
                        } ;
                    }
                }
            }
            if false {
                #[prusti::spec_only]
                #[prusti::spec_id = "$(NUM_UUID)"]
                #[prusti::assertion =
                  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                let _prusti_loop_invariant =
                    {

                        #[prusti::spec_only]
                        #[prusti::expr_id =
                          "$(NUM_UUID)_101"]
                        || -> bool { true };
                    };
            }
        }
    }
}
fn main() { }
Loop(LoopSpecification { invariant: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:17 ~ true[317d]::test3[0]::{{closure}}[0]) }) }] })
Loop(LoopSpecification { invariant: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:28 ~ true[317d]::test4[0]::{{closure}}[0]) }) }] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:7 ~ true[317d]::prusti_pre_item_test1_$(NUM_UUID)[0]::{{closure}}[0]) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:19 ~ true[317d]::prusti_pre_item_test4_$(NUM_UUID)[0]::{{closure}}[0]) }) }], posts: [] })
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:10 ~ true[317d]::prusti_post_item_test2_$(NUM_UUID)[0]::{{closure}}[0]) }) }] })
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:21 ~ true[317d]::prusti_post_item_test4_$(NUM_UUID)[0]::{{closure}}[0]) }) }] })
